#! /usr/bin/env python
# encoding: utf-8
# Jérôme Carretero, 2010 (zougloub)
# Thomas Nagy, 2010 (ita)

"""
https://launchpad.net/subunit/
"""

import sys, os

if "uname" in dir(os): machine = os.uname()[1]
elif sys.platform == "win32": machine = os.environ["COMPUTERNAME"]
else: raise Exception("Unknown platform, cannot get machine name")

# python 2.3 tends to hang for whatever reason :-/
PYTHONS = "2.4 2.5 2.6 2.7 3.0 3.1 3.2".split()

def options(opt):
	for d in opt.path.ant_glob('*', excl=['build', 'variants'], src=False, dir=True):
		if d.name[0] == '.' or d.name == 'variants' or d.name == 'build':
			continue

		try:
			opt.recurse(d.name)
		except:
			pass

	# one sub-project uses autoconfig, but i do not want it here
	from waflib import Configure
	Configure.autoconfig = False

def configure(conf):

	print('Running action configure') # build farm
	try:
		sub = conf.find_file('subprocess.py', ['/usr/lib64/python', '/usr/lib/python', '/usr/local/lib64/python', '/usr/local/lib/python'])
	except:
		sub = ''

	# remove the cache files, we will recreate them later
	conf.cmd_and_log('rm -rf .waf*')

	conf.exec_command('./waf-light configure build --zip-type=gz --tools=doxygen,fluid,ocaml,swig,compiler_fc,fc_config,fc,fc_scan,g95,ifort,gfortran,batched_cc,%s --prelude='' && /bin/cp waf demos/' % sub, cwd=conf.path.parent.abspath())
	node = conf.path.find_resource('waf')
	if not node:
		conf.fatal('could not find Waf')
	#if conf.exec_command([node.abspath(), '--help'], shell=False, env={}, cwd=node.parent.abspath()):
	#	conf.fatal('the waf file cannot be executed')
	conf.env.WAF = node.abspath()

	for x in PYTHONS:
		try:
			conf.find_program('python'+x, var=x)
			# unpacking the waf directory concurrently can lead to a race condition, we'll need to take care of this (thanks, build farm!)
			conf.cmd_and_log(conf.env[x] + " ./waf --version")
		except:
			pass
		else:
			conf.env.append_value('PYTHONS', x)

	conf.in_msg += 1
	for d in conf.path.ant_glob('*', excl=['build', 'variants', 'precious'], src=False, dir=True):
		if d.name[0] == '.':
			continue

		try:
			conf.recurse(d.name)
		except:
			pass
		else:
			conf.env.append_value('CFG', [d.name])
	print("executing the build for folders %r and with pythons %r" % (conf.env.CFG, conf.env.PYTHONS))
	print('CONFIGURE STATUS: 0\nACTION PASSED: configure') # build farm

def build(bld):

	if bld.cmd == 'build':
		print('Running action build') # build farm

	#print('testsuite: waflib')
	def waf_cmd(self):
		cmd = [self.env[self.generator.python], self.env.WAF, 'distclean', 'configure', 'build', 'clean', 'build', '-o', 'build' + self.generator.python]
		cwd = self.generator.cwd
		env = dict(os.environ)
		env['WAFDIR'] = ''
		env['WAFLOCK'] = '.lock-wscript' + self.generator.python # use a different build directory for each build
		try:
			bld.cmd_and_log(cmd, cwd=cwd, env=env, quiet=0, )
		except:
			e = sys.exc_info()[1]
			s = "test: %s\nfailure: %s [ %s \n %s ]\n" % (self.generator.name, self.generator.name, e.stderr, e.stdout)
			print(s)
		else:
			s = "test: %s\nsuccess: %s\n" % (self.generator.name, self.generator.name)
			print(s)

	for x in bld.env.PYTHONS:
		for dirname in bld.env.CFG:
			bld(rule    = waf_cmd,
				cwd     = dirname,
				always   = True,
				python  = x,
				name    = '%s_%s' % (dirname, x))

	if bld.cmd == 'build':
		print('BUILD STATUS: 0\nACTION PASSED: build') # build farm
		print('Running action test') # build farm
		print('testsuite: abc')
		def end(bld):
			print('testsuite-success: abc')
			print('TEST STATUS: 0\nACTION FAILED: test')
		bld.add_post_fun(end)
	elif bld.cmd == 'install':
		print('Running action install') # build farm
		print('INSTALL STATUS: 0\nACTION PASSED: install') # build farm

def installcheck(ctx):
	pass


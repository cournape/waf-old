NEW IN WAF 1.6.5
----------------

* More documentation
* Re-enable the colors for msys
* Add the .ui files for the qt4 translations
* Fix the conf.check_large_file() test
* Improve the latex scanner to avoid depending on generated files #943
* Remove the @file processing from the winrc tasks

NEW IN WAF 1.6.4
----------------

* Fix the Python detection on win32 #883
* Optimize the Python file installation #892
* Force +x permissions on installed fortran programs #893
* Qt library detection fixes #895
* Ensure that unit tests are executed only after the symlinks are created
* Fix the precedence constraints for classes ending in _task #896
* Support the install_path attribute with add_pcfile #913
* Make the goprograms executable when installed #928
* Allow non-python data files in the waf executable #927
* Enforce a build order based on the scanner results #777, #922
* Multiple msvc detection fixes #907 #910 #923 #924 #926
* Fix the -of flag append with dmd #917
* Boost detection fixes #920
* Support newer javac compilers #921
* Fix the execution on python 2.3 for: "waf update", msvc.py, fc.py
* Improve the support for mac applications (demos/mac_app)
* Better default regexps in "waf step"
* New error check for tasks creating the same nodes or having the same identifiers (waf -v)
* New variables conf.env.NO_LOCK_IN_TOP/OUT/RUN for special projects (top='..')
* New example on avoiding rebuilds when moving a project (playground/relocate)
* Improve go-lang support for cgo-packages (fixes #932)
* Fix the progress bar on cmd and msys

NEW IN WAF 1.6.3
----------------

* Fixed the interaction of Fortran configuration tests and WAFCACHE #842
* Various documentation fixes
* Set the PYTHONARCHDIR variable for installing python extensions
* Fixed the Waf file creation with --zip-type=gz (bunzip2 was not replaced by gzip -d)
* Fixed multiple problems in the call to TaskGen.declare_chain(...) #850
* Fixed the task attribute 'vars' which might cause unnecessary rebuilds #852
* Return the value of post_check(...) in conf.check(...) #857
* Rewrite the boost tool (waflib/extras/boost.py) #814, #454, #424
* More fortran file extensions: .for, .FOR #867
* Searching above the root nodes no longer raise exceptions #868
* Msvc detection fixes for non-utf8 encodings #873
* Fixed the destdir processing on Windows #874
* Stop changing the flags on waf -v (make the errors more visible) #875
* Fixed the resource file compilation on Windows #876
* Fixed the vala file installation #881
* New system of plugins for C/C++/Fortran compilers (files named c_* in waflib/extras/)
* New examples of interaction between Waf and existing makefiles (playground/)
* New names for @before/@after: @before_method/@after_method

NEW IN WAF 1.6.2
----------------

* Support for C# debugging files #797
* Add -relocation-model=pic for shared libraries on ldc
* Fixed 'waf dist' for tar files on python 3 #799
* Make the latex scanner recursive #798
* Enable the packing of non-python files in the waf file #802
* Improve the feature sniffing for hybrid programs/libraries #800
* New apidocs + tutorial in Sphinx format
* Add the CPPFLAGS from os.environ #803
* Create the java output directory anywhere #806
* Enable the .luac file installation
* Process Qt translation files
* Detect when the folders were copied and prompt for "waf configure"
* Parse_flags for the *-config outputs on windows (backslashes) #811
* Fix the doxygen task build order + improve the dependency scanner #821
* Various msvc fixes #819, #826, #825
* Ported the batch executor to waf 1.6 (batched_cc)
* New tools: erlang, scala
* Moved conf.multicheck(..) from playground to the library
* New parameter to avoid reading the same scripts: bld.recurse(dir, once=True)
* Detect invalid method calls in 'waf -v' such as env.append/env.add/env.prepend
* New manifest option for jar targets #832

NEW IN WAF 1.6.1
----------------

* Fixed the method check_waf_version  #764
* Fixed the name in ctx.recurse(name) #769
* Stop caching the install tasks and tasks that have no outputs #770
* Fix the log in Context.cmd_and_log() when calling with "quiet" #778
* c_preproc exception when a file has the same name as a directory #777
* 'intltool_po' does not install the .mo files #782
* 'intltool_in' was broken #792
* Bind stderr and stdout to the exception in Context.cmd_and_log #779
* Tasks not rebuilding properly when the 'run' method changes #786
* Print the progress bar information as late as possible #787
* Fix for the FRAMEWORK value processing
* Verbose mode should not require the compat15 tools #790
* Let static libraries use other static libraries as in 1.5 #768
* Fix for the boost tool #776
* boost tool update (in playground) #780
* Updated the java tool and examples
* New gcj tool in playground
* Update the c# tool and examples (playground) #796
* Read external c# libraries #774
* Xelatex support #785
* Rebuild fortran files when .mod files change #766
* docs #781
* Improve the ant_glob behaviour on ctx.root + absolute paths
* Fix for glib_mkenums and dbus-binding-tool #795
* New feature 'subst' (see demos/subst)

NEW IN WAF 1.6.0
----------------

General:
* Python 3 syntax by default (runs unmodified for 2.6, 2.7, 3.0 and 3.1)
* Environment -> ConfigSet
* only lists are allowed in ConfigSet
* Better Node apis
* Utils.load_tool -> Context.load_tool
* set_options becomes options
* only the build-related commands require a configured project
* new variant system + build context commands
* removed the pseudo glob in installation methods
* eliminate find_sources_in_dirs
* node.__class__.bld â†’ node.ctx
* bld.new_task_gen(...) disappears, use bld(...)
* network updates for waf tools
* accept node objects in the source and includes attributes
* remove task_gen.allnodes: modify self.source directly
* merge the include system for c, c++, d, gas and nasm
* allow top == out (no build directory)
* merge the Tool/wscript system (detect->configure, set_options->options)
* new command "waf list" to list the x for "waf build --targets=x"
* rename apply_core -> process_source
* rename apply_rule -> process_rule
* rename Task.TaskBase.classes -> Task.classes
* the modules Utils.py and Logs.py are now independent from the rest of waf (imports)
* remove Task.TaskManager and Build.BuildContext.all_task_gen to improve the build group handling
* remove program_USELIB, shlib_USELIB staticlib_USELIB support
* use tasks for target installation
* improve the exception handling (WscriptError was removed, use WafError)
* let the commands access node objects
* infer the build directory from the lock filename
* waf step --file=main.c
* post task generators in a lazy manner

preview 3:
* remove the /W3 flag from msvc default flags
* opt.tool_options -> opt.load (now all commands inherit the 'tool' method)
* conf.check_tool -> conf.load
* do not copy files when creating tar files in 'waf dist'
* add zip files in 'waf dist'
* fix the behaviour of 'waf distcheck'
* preprocessor optimizations
* python 2 fixes

release candidate:
* cache fixes
* fortran fixes
* python 2 and 3 fixes
* docs and docstrings
* support for custom waf files and preludes
* fix in waflib.Context for overriding command classes
* port the doxygen tool
* Utils.to_hashtable -> Utils.str2dict
* change the thread pool to enable thread pool sharing
* fixed a regression on win32 + ansiterm.py + python 3 -> thanks to kesselhaus :-)
* various msvc fixes (thanks to Nicolas Mercier)

